//------------------------------------------------------------------------------------------
// File : MeshX.cpp
// Desc : X File Module.
// Copyright(c) Project Asura. All right reserved.
//------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------
// Includes
//------------------------------------------------------------------------------------------
#include <MeshX.h>
#include <iostream>



namespace /* anonymous */ {

////////////////////////////////////////////////////////////////////////////////////////////
// Token class
////////////////////////////////////////////////////////////////////////////////////////////
class Token
{
    //======================================================================================
    // list of friend classes and methods.
    //======================================================================================
    /* NOTHING */

public:
    //======================================================================================
    // public variables.
    //======================================================================================
    /* NOTHING */

    //======================================================================================
    // public methods.
    //======================================================================================

    //--------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------------------
    Token( char* pHead )
    : m_pPtr ( pHead )
    { memset( m_Token, 0, sizeof(char) * 2048 ); }

    //--------------------------------------------------------------------------------------
    //! @brief      トークンが有効であるかチェックします.
    //--------------------------------------------------------------------------------------
    bool IsValid( const char* token )
    { return ( 0 == strcmp( m_Token, token ) ); }

    //--------------------------------------------------------------------------------------
    //! @brief      次のトークンを取得します.
    //--------------------------------------------------------------------------------------
    void GetNext()
    {
        char* p = m_pPtr;
        char* q = m_Token;

        while( (*p) != '\0' && strchr( " \t\r\n,;\"", (*p) ) )
        { p++; }

        if ( (*p) == '{' || (*p) == '}' )
        { (*q++) = (*p++); }
        else
        {
            while( (*p) != '\0' && !strchr( " \t\r\n,;\"{}", (*p) ) )
            { (*q++) = (*p++); }
        }

        m_pPtr = p;
        (*q) = '\0';
    }

    //-------------------------------------------------------------------------------------
    //! @brief      次のトークンが有効であるかチェックします.
    //-------------------------------------------------------------------------------------
    bool IsNextValid( const char* token )
    {
        GetNext();
        if ( 0 != strcmp( m_Token, token ) )
        {
            printf_s( "Error : Invalid Token.\n" );
            printf_s( "    Expect Token : [%s]\n", token );
            printf_s( "    Readed Token : [%s]\n", m_Token );
            return false;
        }
        return true;
    }

    //-------------------------------------------------------------------------------------
    //! @brief      トークンをfloatとして取得します.
    //-------------------------------------------------------------------------------------
    float GetAsFloat()
    { return (float)atof( m_Token ); }

    //-------------------------------------------------------------------------------------
    //! @brief      トークンをintとして取得します.
    //-------------------------------------------------------------------------------------
    int GetAsInt()
    { return (int)atoi( m_Token ); }

    //-------------------------------------------------------------------------------------
    //! @brief      次のトークンをfloatとして取得します.
    //-------------------------------------------------------------------------------------
    float GetNextAsFloat()
    { 
        GetNext();
        return GetAsFloat();
    }

    //-------------------------------------------------------------------------------------
    //! @brief      次のトークンをintとして取得します.
    //-------------------------------------------------------------------------------------
    int GetNextAsInt()
    {
        GetNext();
        return GetAsInt();
    }

    //-------------------------------------------------------------------------------------
    //! @brief      ノードをスキップします.
    //-------------------------------------------------------------------------------------
    bool SkipNode()
    {
        while( (*m_pPtr) != '\0' )
        {
            GetNext();
            if ( strchr( m_Token, '{' ) )
            { break; }
        }

        int count = 1;

        while( (*m_pPtr) != '\0' && count > 0 )
        {
            GetNext();
            if ( strchr( m_Token, '{' ) )
            { count++; }
            else if ( strchr( m_Token, '}' ) )
            { count--; }
        }

        if ( count > 0 )
        {
            printf_s( "Error : Block Not Match.\n" );
            return false;
        }

        return true;
    }

protected:
    //=====================================================================================
    // protected variables.
    //=====================================================================================
    /* NOTHING */

    //=====================================================================================
    // protected methods.
    //=====================================================================================
    /* NOTHING */

private:
    //=====================================================================================
    // private variables.
    //=====================================================================================
    char*   m_pPtr;
    char    m_Token[ 2048 ];

    //=====================================================================================
    // private methods.
    //=====================================================================================
    Token           ( const Token& value );     // アクセス禁止.
    void operator = ( const Token& value );     // アクセス禁止.
};


} // namespace /* anonymous */ 


///////////////////////////////////////////////////////////////////////////////////////////
// ModelX class
///////////////////////////////////////////////////////////////////////////////////////////

ModelX::ModelX()
: m_Meshes      ()
, m_Materials   ()
, m_Box         ()
, m_Sphere      ()
{ /* DO_NOTHING */ }

ModelX::ModelX( const ModelX& value )
: m_Meshes      ( value.m_Meshes )
, m_Materials   ( value.m_Materials )
, m_Box         ( value.m_Box )
, m_Sphere      ( value.m_Sphere )
{ /* DO_NOTHING */ }

ModelX::~ModelX()
{ Release(); }

void ModelX::Release()
{
    m_Meshes   .clear();
    m_Materials.clear();
}

bool ModelX::LoadFromFile( const char* filename )
{
    if ( filename == nullptr )
    { return false; }

    return true;
}


