//-------------------------------------------------------------------------------------------
// File : Mouse.h
// Desc : Mouse Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------

#ifndef _MOUSE_H_
#define _MOUSE_H_

//-------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------
#include <TinyMath.h>


/////////////////////////////////////////////////////////////////////////////////////////////
// MouseState enum
/////////////////////////////////////////////////////////////////////////////////////////////
typedef enum MouseState
{ 
    Push,       //!< ボタンを押下.
    Release,    //!< ボタンが離された.
    None        //!< 何もされていない.
};


/////////////////////////////////////////////////////////////////////////////////////////////
// Cursor class
/////////////////////////////////////////////////////////////////////////////////////////////
struct Cursor
{
    float x;        //!< X座標.
    float y;        //!< Y座標.

    //---------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------
    Cursor()
    : x( 0.0f )
    , y( 0.0f )
    { /* DO_NOTHING */ }

    //---------------------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //---------------------------------------------------------------------------------------
    Cursor( const Cursor& value )
    : x ( value.x )
    , y ( value.y )
    { /* DO_NOTHING */ }

    //---------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------------
    Cursor( float nx, float ny ) 
    : x( nx )
    , y( ny )
    { /* DO_NOTHING */ }

    //---------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------
    ~Cursor()
    { /* DO_NOTHING */ }

    //---------------------------------------------------------------------------------------
    //! @brief      リセットします.
    //---------------------------------------------------------------------------------------
    void Reset()
    {
        x = 0.0f;
        y = 0.0f;
    }
};


/////////////////////////////////////////////////////////////////////////////////////////////
//  MouseButton struct
/////////////////////////////////////////////////////////////////////////////////////////////
struct MouseButton
{
    Cursor      before;     //!< ドラッグ開始..
    Cursor      current;    //!< 現在.
    Cursor      after;      //!< ドラッグ後.
    MouseState  state;      //!< ボタンの状態.

    //---------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------
    MouseButton()
    : before    ()
    , current   ()
    , after     ()
    , state     ( None )
    { /* DO_NOTHING */ }

    //---------------------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //---------------------------------------------------------------------------------------
    MouseButton( const MouseButton& value )
    : before    ( value.before )
    , current   ( value.current )
    , after     ( value.after )
    , state     ( value.state )
    { /* DO_NOTHING */ }

    //---------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------
    ~MouseButton()
    { /* DO_NOTHING */ }

    //---------------------------------------------------------------------------------------
    //! @brief      リセットします.
    //---------------------------------------------------------------------------------------
    void Reset()
    {
        before .Reset();
        current.Reset();
        after  .Reset();
        state = None;
    }
};


/////////////////////////////////////////////////////////////////////////////////////////////
// Camara class
/////////////////////////////////////////////////////////////////////////////////////////////
class Camera
{
    //=======================================================================================
    // public variables.
    //=======================================================================================
    /* NOTHING */

public:
    //=======================================================================================
    // public variables.
    //=======================================================================================
    /* NOTHING */

    //=======================================================================================
    // public methods.
    //=======================================================================================
    Camera();
    Camera( const Camera& value );
    virtual ~Camera();
    void Reset( float distance );
    void MouseInput( int button, int state, int x, int y );
    void MouseMotion( int x, int y );
    void Update();
    void DrawGizmo( int w, int h );

    Camera& operator = ( const Camera& value );

protected:
    //=======================================================================================
    // protected variables.
    //=======================================================================================
    MouseButton m_Right;
    MouseButton m_Left;
    MouseButton m_Middle;
    float       m_Distance;
    Vec2        m_Angle;
    Vec3        m_Position;
    Vec3        m_Target;
    Vec3        m_Upward;
    Vec3        m_Move;

    //=======================================================================================
    // protected methods.
    //=======================================================================================
    /* NOTHING */

private:
    //=======================================================================================
    // private variables.
    //=======================================================================================
    /* NOTHING */

    //=======================================================================================
    // private methods.
    //=======================================================================================
    /* NOTHING */
};


#endif //__MOUSE_H__
